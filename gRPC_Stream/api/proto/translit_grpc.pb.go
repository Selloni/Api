// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.24.4
// source: proto/translit.proto

package session

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Transliteation_EnRu_FullMethodName = "/translit.Transliteation/EnRu"
)

// TransliteationClient is the client API for Transliteation service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TransliteationClient interface {
	EnRu(ctx context.Context, opts ...grpc.CallOption) (Transliteation_EnRuClient, error)
}

type transliteationClient struct {
	cc grpc.ClientConnInterface
}

func NewTransliteationClient(cc grpc.ClientConnInterface) TransliteationClient {
	return &transliteationClient{cc}
}

func (c *transliteationClient) EnRu(ctx context.Context, opts ...grpc.CallOption) (Transliteation_EnRuClient, error) {
	stream, err := c.cc.NewStream(ctx, &Transliteation_ServiceDesc.Streams[0], Transliteation_EnRu_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &transliteationEnRuClient{stream}
	return x, nil
}

type Transliteation_EnRuClient interface {
	Send(*Word) error
	Recv() (*Word, error)
	grpc.ClientStream
}

type transliteationEnRuClient struct {
	grpc.ClientStream
}

func (x *transliteationEnRuClient) Send(m *Word) error {
	return x.ClientStream.SendMsg(m)
}

func (x *transliteationEnRuClient) Recv() (*Word, error) {
	m := new(Word)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// TransliteationServer is the server API for Transliteation service.
// All implementations must embed UnimplementedTransliteationServer
// for forward compatibility
type TransliteationServer interface {
	EnRu(Transliteation_EnRuServer) error
	mustEmbedUnimplementedTransliteationServer()
}

// UnimplementedTransliteationServer must be embedded to have forward compatible implementations.
type UnimplementedTransliteationServer struct {
}

func (UnimplementedTransliteationServer) EnRu(Transliteation_EnRuServer) error {
	return status.Errorf(codes.Unimplemented, "method EnRu not implemented")
}
func (UnimplementedTransliteationServer) mustEmbedUnimplementedTransliteationServer() {}

// UnsafeTransliteationServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TransliteationServer will
// result in compilation errors.
type UnsafeTransliteationServer interface {
	mustEmbedUnimplementedTransliteationServer()
}

func RegisterTransliteationServer(s grpc.ServiceRegistrar, srv TransliteationServer) {
	s.RegisterService(&Transliteation_ServiceDesc, srv)
}

func _Transliteation_EnRu_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(TransliteationServer).EnRu(&transliteationEnRuServer{stream})
}

type Transliteation_EnRuServer interface {
	Send(*Word) error
	Recv() (*Word, error)
	grpc.ServerStream
}

type transliteationEnRuServer struct {
	grpc.ServerStream
}

func (x *transliteationEnRuServer) Send(m *Word) error {
	return x.ServerStream.SendMsg(m)
}

func (x *transliteationEnRuServer) Recv() (*Word, error) {
	m := new(Word)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Transliteation_ServiceDesc is the grpc.ServiceDesc for Transliteation service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Transliteation_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "translit.Transliteation",
	HandlerType: (*TransliteationServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "EnRu",
			Handler:       _Transliteation_EnRu_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "proto/translit.proto",
}
